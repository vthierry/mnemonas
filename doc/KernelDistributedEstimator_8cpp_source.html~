<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Mnemonas&#39;semiware: src/network/KernelDistributedEstimator.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Mnemonas&#39;semiware
   </div>
   <div id="projectbrief">Implementation of a Mnemonas semiware</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li><li class="navelem"><a class="el" href="dir_fc4c7f03e1a69a98c370fae55a743828.html">network</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">KernelDistributedEstimator.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="KernelDistributedEstimator_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mnemonas_8hpp.html">mnemonas.hpp</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno"><a class="line" href="classnetwork_1_1KernelDistributedEstimator.html#a301ebb768c77fe9033c9dc197f4fccc2">    3</a></span>&#160;<a class="code" href="classnetwork_1_1KernelDistributedEstimator.html#a301ebb768c77fe9033c9dc197f4fccc2">network::KernelDistributedEstimator::KernelDistributedEstimator</a>(<a class="code" href="classnetwork_1_1KernelTransform.html">KernelTransform</a>&amp; transform, <a class="code" href="classnetwork_1_1TransformCriterion.html">TransformCriterion</a>&amp; criterion) : <a class="code" href="classnetwork_1_1KernelEstimator.html">KernelEstimator</a>(transform, criterion)</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> D = 0;</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; <a class="code" href="classnetwork_1_1KernelEstimator.html#a56e718cf40ef046d7f80574a5d4ac390">N</a>; n++) {</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = transform.<a class="code" href="classnetwork_1_1KernelTransform.html#a5472cb053b6ae5f597042297ff20a236">getKernelDimension</a>(n);</div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;    D = D &lt; d ? d : D;</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  }</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  A = <span class="keyword">new</span> <span class="keywordtype">double</span>[D * D];</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  b = <span class="keyword">new</span> <span class="keywordtype">double</span>[D];</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  w0 = <span class="keyword">new</span> <span class="keywordtype">double</span>[D];</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  w1 = <span class="keyword">new</span> <span class="keywordtype">double</span>[D];</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;}</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;network::KernelDistributedEstimator::~KernelDistributedEstimator()</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keyword">delete</span>[] w1;</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keyword">delete</span>[] w0;</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">delete</span>[] b;</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keyword">delete</span>[] A;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div><div class="line"><a name="l00024"></a><span class="lineno"><a class="line" href="classnetwork_1_1KernelDistributedEstimator.html#a26ea86523402b29e9b2c5bff6353b58d">   24</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classnetwork_1_1KernelEstimator.html#a13676de0f24b795ccbf9defab7a0e976">network::KernelDistributedEstimator::run</a>(<span class="keywordtype">double</span> criterion_epsilon, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maxIterations, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_duration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_count, <span class="keywordtype">bool</span> with_update)</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;{</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keywordtype">double</span> cost0 = <a class="code" href="classnetwork_1_1KernelEstimator.html#a505972d6e145a19b33eeb1f789f6ce63">criterion</a>.<a class="code" href="classnetwork_1_1TransformCriterion.html#a7963396ce352223a5e05e6774eaf6712">rho</a>(), cost_oo = cost0 * criterion_epsilon;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a> = cost0;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; (maxIterations == 0 || i &lt; maxIterations) &amp;&amp; cost_oo &lt; <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a>; i++)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    run_once(batch_duration, batch_count, with_update);</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a>;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keywordtype">void</span> network::KernelDistributedEstimator::run_once(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_duration, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> batch_count, <span class="keywordtype">bool</span> with_update)</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="comment">// Performs backward tuning and calculates the 2nd order system</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keywordtype">double</span> cost0 = <a class="code" href="classnetwork_1_1KernelEstimator.html#a13676de0f24b795ccbf9defab7a0e976">KernelEstimator::run</a>();</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> k = 0; k &lt; batch_count; k++) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="comment">// Randomly selects a unit with weight to adjust</span></div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n, D;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(<a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a03aa4a256f781efb64b5937fcdd7d228">getWeightCount</a>() &gt; 0, <span class="stringliteral">&quot;illegal-argument&quot;</span>, <span class="stringliteral">&quot;in network::KernelDistributedEstimator::run_once : no weight to adjust&quot;</span>);</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      <span class="keywordflow">do</span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        n = <a class="code" href="classDensity.html#a18f0d556fae7cd2ff15c2df01ca17eeb">Density::uniform</a>(0, <a class="code" href="classnetwork_1_1KernelEstimator.html#a56e718cf40ef046d7f80574a5d4ac390">N</a>), D = <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a5472cb053b6ae5f597042297ff20a236">getKernelDimension</a>(n);</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      <span class="keywordflow">while</span>(D == 0);</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    }</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="comment">// Randomly selects an epoch</span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> S = batch_duration &lt; D ? D : batch_duration, t0 = <a class="code" href="classDensity.html#a18f0d556fae7cd2ff15c2df01ca17eeb">Density::uniform</a>(0, <a class="code" href="classnetwork_1_1KernelEstimator.html#ae54b11e7bf638973ac15973170bd7085">T</a> - S);</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">if</span>(with_update)</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;      <a class="code" href="classnetwork_1_1KernelEstimator.html#a505972d6e145a19b33eeb1f789f6ce63">criterion</a>.<a class="code" href="classnetwork_1_1TransformCriterion.html#a961a406f73e6c6e5c631b3aff686294a">update</a>();</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> s = 0, sr = 0; s &lt; S; s++) {</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      b[s] = <a class="code" href="classnetwork_1_1KernelEstimator.html#ad932a9fcc9814e53e29e70f40d4aef2f">getValue</a>(n, t0 + s) - <a class="code" href="classnetwork_1_1KernelEstimator.html#a0fdd003d9dbfbfcbd35575583e1956f4">getError</a>(n, t0 + s) - <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a06bfef1a45772c9212d3dcba92d4716b">getKernelValue</a>(n, 0, t0 + s);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;      <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> r = 0; r &lt; D; r++, sr++)</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        A[sr] = <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a06bfef1a45772c9212d3dcba92d4716b">getKernelValue</a>(n, r + 1, t0 + s);</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    }</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; D; d++)</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      w0[d] = <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#aed8378faaac02ee9707b146a15ce9f4e">getWeight</a>(n, d + 1);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="comment">// Solves the 2nd order system and performs line search around the solution</span></div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="classsolver.html#a99ade901a1783e7bfb5ca4b7ac7bbf99">solver::linsolve</a>(S, D, A, <span class="keyword">false</span>, b, w1, w0);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    solver_minimize_this = <span class="keyword">this</span>, n_f = n, D_f = D, c_f = 0;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">double</span> u = <a class="code" href="classsolver.html#a16ce3bb11795bd3b61ed01197802415b">solver::minimize</a>(solver_minimize_this_f, -10, 10, 1e-1);</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    line_search_values.<a class="code" href="classCurveFit.html#a72cab7178ce12239b61b74f3ac11cd0c">add</a>(u);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    line_search_counts.<a class="code" href="classCurveFit.html#a72cab7178ce12239b61b74f3ac11cd0c">add</a>(c_f);</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="comment">// -printf(&quot;run_distributed_estmation_once { &#39;n&#39;: %d, &#39;u&#39;: %6.4f, &#39;c&#39;: %d, &#39;cost&#39;: %6.2g, &#39;ok&#39;: %d, &#39;d_cost&#39; : %g, &#39;delta_cost&#39; : %g }\n&quot;, n, u, c_f, cost, cost &lt; cost0, cost0 - cost, (cost0 - cost) / cost0);</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="comment">// Restore initial weights if no improvement</span></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a> &lt; cost0)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      cost0 = <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a>;</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">else</span> {</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; D; d++)</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a4625a8752d531614e4ea61eecc6a415b">setWeight</a>(n, d + 1, w0[d]);</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;      <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a> = cost0;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  }</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keywordtype">double</span> network::KernelDistributedEstimator::solver_minimize_f(<span class="keywordtype">double</span> u)</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  c_f++;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; D_f; d++)</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <a class="code" href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">transform</a>.<a class="code" href="classnetwork_1_1KernelTransform.html#a4625a8752d531614e4ea61eecc6a415b">setWeight</a>(n_f, d + 1, w0[d] + u * (w1[d] - w0[d]));</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  <span class="comment">// - printf(&quot;\t{ &#39;#&#39;: %d, &#39;u&#39;: %6.4f } %s\n&quot;, c_f, u, transform.asString().c_str());</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">cost</a> = <a class="code" href="classnetwork_1_1KernelEstimator.html#a505972d6e145a19b33eeb1f789f6ce63">criterion</a>.<a class="code" href="classnetwork_1_1TransformCriterion.html#a7963396ce352223a5e05e6774eaf6712">rho</a>();</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;}</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keywordtype">double</span> network::KernelDistributedEstimator::solver_minimize_this_f(<span class="keywordtype">double</span> u)</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="keywordflow">return</span> solver_minimize_this-&gt;solver_minimize_f(u);</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;}</div><div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="classnetwork_1_1KernelDistributedEstimator.html#ad4a9ade25f6d6a508859be7955c600a3">   85</a></span>&#160;<span class="keyword">const</span> <a class="code" href="classCurveFit.html">CurveFit</a>&amp; <a class="code" href="classnetwork_1_1KernelDistributedEstimator.html#ad4a9ade25f6d6a508859be7955c600a3">network::KernelDistributedEstimator::getFit</a>(<a class="code" href="s__string_8h.html#a342f13820a6f9c4de28e5a0940976db7">String</a> what)<span class="keyword"> const</span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">return</span> what == <span class="stringliteral">&quot;line-search-value&quot;</span> ? line_search_values : what == <span class="stringliteral">&quot;line-search-count&quot;</span> ? line_search_counts : <a class="code" href="classnetwork_1_1KernelEstimator.html#a1c51dd949511b23a9378a2104b28965d">network::KernelEstimator::getFit</a>(what);</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<a class="code" href="classnetwork_1_1KernelDistributedEstimator.html">network::KernelDistributedEstimator</a> *network::KernelDistributedEstimator::solver_minimize_this = NULL;</div><div class="ttc" id="classnetwork_1_1KernelEstimator_html_a13676de0f24b795ccbf9defab7a0e976"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a13676de0f24b795ccbf9defab7a0e976">network::KernelEstimator::run</a></div><div class="ttdeci">double run()</div><div class="ttdoc">Runs one step of estimation. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8cpp_source.html#l00018">KernelEstimator.cpp:18</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_a0fdd003d9dbfbfcbd35575583e1956f4"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a0fdd003d9dbfbfcbd35575583e1956f4">network::KernelEstimator::getError</a></div><div class="ttdeci">double getError(unsigned int n, double t) const</div><div class="ttdoc">Gets the last estimated backward error. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00066">KernelEstimator.hpp:66</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_a5472cb053b6ae5f597042297ff20a236"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#a5472cb053b6ae5f597042297ff20a236">network::KernelTransform::getKernelDimension</a></div><div class="ttdeci">virtual unsigned int getKernelDimension(unsigned int n) const</div><div class="ttdoc">Returns the recurrent kernel dimension. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8cpp_source.html#l00029">KernelTransform.cpp:29</a></div></div>
<div class="ttc" id="classDensity_html_a18f0d556fae7cd2ff15c2df01ca17eeb"><div class="ttname"><a href="classDensity.html#a18f0d556fae7cd2ff15c2df01ca17eeb">Density::uniform</a></div><div class="ttdeci">static double uniform(double min=0, double max=1)</div><div class="ttdoc">Generates a uniform random or pseudo random value. </div><div class="ttdef"><b>Definition:</b> <a href="Density_8cpp_source.html#l00029">Density.cpp:29</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_a505972d6e145a19b33eeb1f789f6ce63"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a505972d6e145a19b33eeb1f789f6ce63">network::KernelEstimator::criterion</a></div><div class="ttdeci">TransformCriterion &amp; criterion</div><div class="ttdoc">The criterion to apply. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00012">KernelEstimator.hpp:12</a></div></div>
<div class="ttc" id="classnetwork_1_1TransformCriterion_html_a7963396ce352223a5e05e6774eaf6712"><div class="ttname"><a href="classnetwork_1_1TransformCriterion.html#a7963396ce352223a5e05e6774eaf6712">network::TransformCriterion::rho</a></div><div class="ttdeci">virtual double rho() const</div><div class="ttdoc">Defines the estimator criterion. </div><div class="ttdef"><b>Definition:</b> <a href="TransformCriterion_8cpp_source.html#l00012">TransformCriterion.cpp:12</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html">network::KernelTransform</a></div><div class="ttdoc">Defines a discrete-time recurrent input/output kernel transform. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8hpp_source.html#l00016">KernelTransform.hpp:16</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelDistributedEstimator_html_ad4a9ade25f6d6a508859be7955c600a3"><div class="ttname"><a href="classnetwork_1_1KernelDistributedEstimator.html#ad4a9ade25f6d6a508859be7955c600a3">network::KernelDistributedEstimator::getFit</a></div><div class="ttdeci">const CurveFit &amp; getFit(String what=&quot;cost&quot;) const</div><div class="ttdoc">Gets some fits of the estimation runs. </div><div class="ttdef"><b>Definition:</b> <a href="KernelDistributedEstimator_8cpp_source.html#l00085">KernelDistributedEstimator.cpp:85</a></div></div>
<div class="ttc" id="s__string_8h_html_a342f13820a6f9c4de28e5a0940976db7"><div class="ttname"><a href="s__string_8h.html#a342f13820a6f9c4de28e5a0940976db7">String</a></div><div class="ttdeci">const std::string &amp; String</div><div class="ttdoc">Defines a string constant value. </div><div class="ttdef"><b>Definition:</b> <a href="s__string_8h_source.html#l00007">s_string.h:7</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_ae54b11e7bf638973ac15973170bd7085"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#ae54b11e7bf638973ac15973170bd7085">network::KernelEstimator::T</a></div><div class="ttdeci">unsigned int T</div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00010">KernelEstimator.hpp:10</a></div></div>
<div class="ttc" id="assume_8h_html_a9812ecd51b96b3714e853e7301515ffe"><div class="ttname"><a href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a></div><div class="ttdeci">void assume(bool condition, String thrown, String message,...)</div><div class="ttdoc">Checks a condition at run-time and throws a fatal error exception and/or dumps a warning if not verif...</div><div class="ttdef"><b>Definition:</b> <a href="assume_8c_source.html#l00007">assume.c:7</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_aed8378faaac02ee9707b146a15ce9f4e"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#aed8378faaac02ee9707b146a15ce9f4e">network::KernelTransform::getWeight</a></div><div class="ttdeci">double getWeight(unsigned int n, unsigned int d) const</div><div class="ttdoc">Gets one weight . </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8hpp_source.html#l00086">KernelTransform.hpp:86</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_a9d9a6036b59ea2b723ae266ff4d39dab"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a9d9a6036b59ea2b723ae266ff4d39dab">network::KernelEstimator::cost</a></div><div class="ttdeci">double cost</div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00016">KernelEstimator.hpp:16</a></div></div>
<div class="ttc" id="classnetwork_1_1TransformCriterion_html_a961a406f73e6c6e5c631b3aff686294a"><div class="ttname"><a href="classnetwork_1_1TransformCriterion.html#a961a406f73e6c6e5c631b3aff686294a">network::TransformCriterion::update</a></div><div class="ttdeci">virtual void update()</div><div class="ttdoc">Updates the best previous estimated value. </div><div class="ttdef"><b>Definition:</b> <a href="TransformCriterion_8cpp_source.html#l00043">TransformCriterion.cpp:43</a></div></div>
<div class="ttc" id="classsolver_html_a16ce3bb11795bd3b61ed01197802415b"><div class="ttname"><a href="classsolver.html#a16ce3bb11795bd3b61ed01197802415b">solver::minimize</a></div><div class="ttdeci">static double minimize(double f(double x), double xmin, double xmax, double xeps=NAN, unsigned int imax=0)</div><div class="ttdoc">Minimizes a 1D function in a given interval. </div><div class="ttdef"><b>Definition:</b> <a href="solver_8cpp_source.html#l00091">solver.cpp:91</a></div></div>
<div class="ttc" id="classnetwork_1_1TransformCriterion_html"><div class="ttname"><a href="classnetwork_1_1TransformCriterion.html">network::TransformCriterion</a></div><div class="ttdoc">Defines a transform critrion. </div><div class="ttdef"><b>Definition:</b> <a href="TransformCriterion_8hpp_source.html#l00003">TransformCriterion.hpp:3</a></div></div>
<div class="ttc" id="classCurveFit_html"><div class="ttname"><a href="classCurveFit.html">CurveFit</a></div><div class="ttdoc">Fits an on-the-fly model on a time series. </div><div class="ttdef"><b>Definition:</b> <a href="CurveFit_8hpp_source.html#l00020">CurveFit.hpp:20</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html">network::KernelEstimator</a></div><div class="ttdoc">Defines basic mechanisms for kernel weights backward tuning estimation. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00005">KernelEstimator.hpp:5</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_a4625a8752d531614e4ea61eecc6a415b"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#a4625a8752d531614e4ea61eecc6a415b">network::KernelTransform::setWeight</a></div><div class="ttdeci">virtual bool setWeight(unsigned int n, unsigned int d, double w)</div><div class="ttdoc">Sets one weight  value. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8cpp_source.html#l00051">KernelTransform.cpp:51</a></div></div>
<div class="ttc" id="classsolver_html_a99ade901a1783e7bfb5ca4b7ac7bbf99"><div class="ttname"><a href="classsolver.html#a99ade901a1783e7bfb5ca4b7ac7bbf99">solver::linsolve</a></div><div class="ttdeci">static double linsolve(unsigned int M, unsigned int N, const double *A, bool symmetric, const double *b, double *x, const double *x0=NULL)</div><div class="ttdoc">Solves a linear system of equations. </div><div class="ttdef"><b>Definition:</b> <a href="solver_8cpp_source.html#l00014">solver.cpp:14</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_a06bfef1a45772c9212d3dcba92d4716b"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#a06bfef1a45772c9212d3dcba92d4716b">network::KernelTransform::getKernelValue</a></div><div class="ttdeci">virtual double getKernelValue(unsigned int n, unsigned int d, double t) const</div><div class="ttdoc">Returns the recurrent kernel value. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8cpp_source.html#l00034">KernelTransform.cpp:34</a></div></div>
<div class="ttc" id="mnemonas_8hpp_html"><div class="ttname"><a href="mnemonas_8hpp.html">mnemonas.hpp</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_a1c51dd949511b23a9378a2104b28965d"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a1c51dd949511b23a9378a2104b28965d">network::KernelEstimator::getFit</a></div><div class="ttdeci">const CurveFit &amp; getFit(String what=&quot;cost&quot;) const</div><div class="ttdoc">Gets some fits of the estimation runs. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8cpp_source.html#l00122">KernelEstimator.cpp:122</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_a03aa4a256f781efb64b5937fcdd7d228"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#a03aa4a256f781efb64b5937fcdd7d228">network::KernelTransform::getWeightCount</a></div><div class="ttdeci">unsigned int getWeightCount() const</div><div class="ttdoc">Returns the total number of weights. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8hpp_source.html#l00077">KernelTransform.hpp:77</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_ad932a9fcc9814e53e29e70f40d4aef2f"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#ad932a9fcc9814e53e29e70f40d4aef2f">network::KernelEstimator::getValue</a></div><div class="ttdeci">double getValue(unsigned int n, double t) const</div><div class="ttdoc">Gets the last estimated state value. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8cpp_source.html#l00113">KernelEstimator.cpp:113</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelDistributedEstimator_html_a301ebb768c77fe9033c9dc197f4fccc2"><div class="ttname"><a href="classnetwork_1_1KernelDistributedEstimator.html#a301ebb768c77fe9033c9dc197f4fccc2">network::KernelDistributedEstimator::KernelDistributedEstimator</a></div><div class="ttdeci">KernelDistributedEstimator(KernelTransform &amp;transform, TransformCriterion &amp;criterion)</div><div class="ttdoc">Resets the estimator for a given kernel transform. </div><div class="ttdef"><b>Definition:</b> <a href="KernelDistributedEstimator_8cpp_source.html#l00003">KernelDistributedEstimator.cpp:3</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_ade9ba22abd10b91582f2edcdc65ae13e"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#ade9ba22abd10b91582f2edcdc65ae13e">network::KernelEstimator::transform</a></div><div class="ttdeci">KernelTransform &amp; transform</div><div class="ttdoc">The tranform to estimate. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00008">KernelEstimator.hpp:8</a></div></div>
<div class="ttc" id="classCurveFit_html_a72cab7178ce12239b61b74f3ac11cd0c"><div class="ttname"><a href="classCurveFit.html#a72cab7178ce12239b61b74f3ac11cd0c">CurveFit::add</a></div><div class="ttdeci">void add(double c)</div><div class="ttdoc">Adds a value in sequence. </div><div class="ttdef"><b>Definition:</b> <a href="CurveFit_8cpp_source.html#l00024">CurveFit.cpp:24</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelDistributedEstimator_html"><div class="ttname"><a href="classnetwork_1_1KernelDistributedEstimator.html">network::KernelDistributedEstimator</a></div><div class="ttdoc">Defines a discrete-time recurrent kernel transform distributed estimator. </div><div class="ttdef"><b>Definition:</b> <a href="KernelDistributedEstimator_8hpp_source.html#l00005">KernelDistributedEstimator.hpp:5</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelEstimator_html_a56e718cf40ef046d7f80574a5d4ac390"><div class="ttname"><a href="classnetwork_1_1KernelEstimator.html#a56e718cf40ef046d7f80574a5d4ac390">network::KernelEstimator::N</a></div><div class="ttdeci">unsigned int N</div><div class="ttdoc">The transform related parameters. </div><div class="ttdef"><b>Definition:</b> <a href="KernelEstimator_8hpp_source.html#l00010">KernelEstimator.hpp:10</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<hr/><div align='right'><tt>mnemosyne brainybot (version of 2018-01-30 at 20:31:53) </tt> </div><hr/>
