<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.13"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>Mnemonas&#39;semiware: src/network/SparseNonLinearTransform.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Mnemonas&#39;semiware
   </div>
   <div id="projectbrief">Implementation of a Mnemonas semiware</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.13 -->
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.html">src</a></li><li class="navelem"><a class="el" href="dir_fc4c7f03e1a69a98c370fae55a743828.html">network</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SparseNonLinearTransform.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SparseNonLinearTransform_8cpp.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mnemonas_8hpp.html">mnemonas.hpp</a>&quot;</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;</div><div class="line"><a name="l00003"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a7f2520017a20c96e6226382ede00b01f">    3</a></span>&#160;<a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a7f2520017a20c96e6226382ede00b01f">network::SparseNonLinearTransform::SparseNonLinearTransform</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> N, <span class="keyword">const</span> <a class="code" href="classnetwork_1_1Input.html">Input</a>&amp; input) : <a class="code" href="classnetwork_1_1KernelTransform.html">KernelTransform</a>(N, 1, input), N(N), D(NULL), DN(0), offsets(NULL), indexes(NULL), connected(NULL)</div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a9d51caab7be469a0824ef3cfa0ec57af">setLeak</a>();</div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a155089a2134a96e499ca4aabbb7d9d60">setConnections</a>();</div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;}</div><div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a6d3b8e2593e59deb7f566203673511ee">    8</a></span>&#160;<a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a7f2520017a20c96e6226382ede00b01f">network::SparseNonLinearTransform::SparseNonLinearTransform</a>(<span class="keyword">const</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html">SparseNonLinearTransform</a>&amp; transform) : <a class="code" href="classnetwork_1_1KernelTransform.html">KernelTransform</a>(transform.N, 1, transform.<a class="code" href="classnetwork_1_1Transform.html#a7cbe29c970df43f5cce3b7fb35b07a9d">input</a>), N(transform.N), leak(transform.leak)</div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;{</div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  D = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[N];</div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  offsets = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[N];</div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; N; n++)</div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;    D[n] = transform.D[n], offsets[n] = transform.offsets[n];</div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  DN = transform.DN;</div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  indexes = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[DN];</div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dn = 0; dn &lt; DN; dn++)</div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    indexes[dn] = transform.indexes[dn];</div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  connected = <span class="keyword">new</span> <span class="keywordtype">bool</span>[N * N];</div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nn = 0; nn &lt; N * N; nn++)</div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    connected[nn] = transform.connected[nn];</div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div><div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a9d51caab7be469a0824ef3cfa0ec57af">   22</a></span>&#160;<a class="code" href="classnetwork_1_1SparseNonLinearTransform.html">network::SparseNonLinearTransform</a>&amp; <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a9d51caab7be469a0824ef3cfa0ec57af">network::SparseNonLinearTransform::setLeak</a>(<span class="keywordtype">double</span> value)</div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(0 &lt;= value &amp;&amp; value &lt; 1, <span class="stringliteral">&quot;illegal-argument&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform we must have leak = %g in [0,1[&quot;</span>, value);</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  leak = value;</div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div><div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a155089a2134a96e499ca4aabbb7d9d60">   28</a></span>&#160;<a class="code" href="classnetwork_1_1SparseNonLinearTransform.html">network::SparseNonLinearTransform</a>&amp; <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a155089a2134a96e499ca4aabbb7d9d60">network::SparseNonLinearTransform::setConnections</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> D_, <span class="keywordtype">int</span> seed)</div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  D_ = D_ == 0 ? (N &lt;= 3 ? 1 : N &lt;= 4 ? 2 : (int) sqrt(N)) : D_;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(D_ &lt; N, <span class="stringliteral">&quot;illegal-argument&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform, D=%d must be in }0, %d}&quot;</span>, D_, N);</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="comment">// Builds index buffer</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">delete</span>[] D;</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    D = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[N];</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">delete</span>[] offsets;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    offsets = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[N];</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; N; n++)</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      D[n] = D_, offsets[n] = n * D_;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    DN = D_ * N;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  }</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  resetWeights();</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="comment">// Draws sparse connection indexes</span></div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  {</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    <span class="keyword">delete</span>[] indexes;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    indexes = <span class="keyword">new</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>[DN];</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keyword">delete</span>[] connected;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    connected = <span class="keyword">new</span> <span class="keywordtype">bool</span>[N * N];</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> nn = 0; nn &lt; N * N; nn++)</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      connected[nn] = <span class="keyword">false</span>;</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classDensity.html#a712af786c3a567c82d3bca02954426f0">Density::setSeed</a>(seed);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; N; n++) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keywordtype">bool</span> *c = <a class="code" href="classDensity.html#ac7a3cee17572937fdd88474d2955af2c">Density::booleans</a>(N - 1, D[n]);</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d_ = 0;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m = 0; m &lt; N - 1; m++)</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span>(c[m]) {</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_ = m &lt; n ? m : m + 1;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;          indexes[d_++ + offsets[n]] = n_;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;          connected[n_ + n * N] = <span class="keyword">true</span>;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        }</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <span class="keyword">delete</span>[] c;</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="comment">// Checks that the generation is ok</span></div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      {</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; D[n]; d++)</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;          <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(indexes[d + offsets[n]] &lt; N, <span class="stringliteral">&quot;illegal-state&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform, we must have index[n = %d, d = %d] in {0, %d{&quot;</span>, n, d, N);</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(d_ == D[n], <span class="stringliteral">&quot;illegal-state&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform, we must have D_n = %d == D[n = %d] = %d&quot;</span>, d_, n, D[n]);</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        {</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;          <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0;</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;          <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_ = 0; n_ &lt; N; n_++)</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">if</span>(connected[n_ + n * N])</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;              d++;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;          <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(d == D[n], <span class="stringliteral">&quot; illegal-state&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform bad number of connections for n = %d, d = %d &lt;&gt; D_n = %d&quot;</span>, n, d, D[n]);</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        }</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      }</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="preprocessor">#if 0</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="comment">// Dumps the connections</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; n &lt; N; n++)</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 0; d &lt; D; d++)</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;          printf(<span class="stringliteral">&quot;%s%3d%s&quot;</span>,</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                 (d == 0 ? (n == 0 ? <span class="stringliteral">&quot;{\n  connections : {\n&quot;</span> : <span class="stringliteral">&quot;&quot;</span>) + <a class="code" href="s__printf_8h.html#a2ee6bdc512e615babf7382300f71f85c">s_printf</a>(<span class="stringliteral">&quot;    &#39;%3d&#39; : [ &quot;</span>, n) : <span class="stringliteral">&quot;&quot;</span>).c_str(),</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                 indexes[d + offsets[n]],</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                 (d &lt; D - 1 ? <span class="stringliteral">&quot;, &quot;</span> : (<span class="stringliteral">&quot; ]&quot;</span> + (std::string) (n &lt; N - 1 ? <span class="stringliteral">&quot;,\n&quot;</span> : <span class="stringliteral">&quot;\n  }\n}\n&quot;</span>))).c_str());</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0, nn = 0; n &lt; N; n++)</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_ = 0; n_ &lt; N; n_++, nn++)</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;          printf(<span class="stringliteral">&quot;%s%1d%s&quot;</span>,</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                 (n_ == 0 ? (n == 0 ? <span class="stringliteral">&quot;[\n&quot;</span> : <span class="stringliteral">&quot;\n&quot;</span>) + <a class="code" href="s__printf_8h.html#a2ee6bdc512e615babf7382300f71f85c">s_printf</a>(<span class="stringliteral">&quot; &#39;%3d&#39; : [ &quot;</span>, n) : <span class="stringliteral">&quot;&quot;</span>).c_str(),</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                 connected[n_ + n * N],</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                 (n_ &lt; N - 1 ? <span class="stringliteral">&quot;&quot;</span> : (<span class="stringliteral">&quot; ]&quot;</span> + (std::string) (n &lt; N - 1 ? <span class="stringliteral">&quot;,&quot;</span> : <span class="stringliteral">&quot;\n]\n&quot;</span>))).c_str());</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    }</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#endif</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  }</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;}</div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a924a015f9be23d01e4f9dc219c13fb01">   96</a></span>&#160;<a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a924a015f9be23d01e4f9dc219c13fb01">network::SparseNonLinearTransform::~SparseNonLinearTransform</a>()</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;{</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keyword">delete</span>[] D;</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keyword">delete</span>[] offsets;</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keyword">delete</span>[] indexes;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keyword">delete</span>[] connected;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;}</div><div class="line"><a name="l00103"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a415e9a6727f2eca0a0e9cd2f2e039f4a">  103</a></span>&#160;<a class="code" href="classnetwork_1_1KernelTransform.html">network::KernelTransform</a>&amp; <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a415e9a6727f2eca0a0e9cd2f2e039f4a">network::SparseNonLinearTransform::setWeights</a>(<span class="keyword">const</span> <a class="code" href="classnetwork_1_1KernelTransform.html">KernelTransform</a>&amp; <a class="code" href="namespacenetwork.html">network</a>)</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(dynamic_cast &lt; const SparseNonLinearTransform * &gt; (&amp;network) != NULL, <span class="stringliteral">&quot;illegal-argument&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform::setWeights wrong network type&quot;</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keyword">const</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html">SparseNonLinearTransform</a>&amp; transform = (<span class="keyword">const</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html">SparseNonLinearTransform</a>&amp;) network;</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordtype">bool</span> isomorphic = N == transform.N;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = 0; isomorphic &amp;&amp; n &lt; N; n++)</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    isomorphic = D[n] == transform.D[n];</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> dn = 0; isomorphic &amp;&amp; dn &lt; DN; dn++)</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    isomorphic = indexes[dn] == transform.indexes[dn];</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <a class="code" href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a>(isomorphic, <span class="stringliteral">&quot;illegal-argument&quot;</span>, <span class="stringliteral">&quot;in network::SparseNonLinearTransform::setWeights cannot be implemented, since connectivity is different&quot;</span>);</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n = N; n &lt; N; n++)</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d = 1; d &lt;= getKernelDimension(n); d++)</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      setWeight(n, d, network.<a class="code" href="classnetwork_1_1KernelTransform.html#aed8378faaac02ee9707b146a15ce9f4e">getWeight</a>(n, d));</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;}</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a90418e196b6e6c2ee0cb411767124680">  118</a></span>&#160;<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a90418e196b6e6c2ee0cb411767124680">network::SparseNonLinearTransform::getKernelDimension</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n)<span class="keyword"> const</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordflow">return</span> n &lt; N ? D[n] + input.getN() : 0;</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div><div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a33573dc2ca11fd5e4a2ae167fe74916f">  122</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a33573dc2ca11fd5e4a2ae167fe74916f">network::SparseNonLinearTransform::getKernelValue</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d, <span class="keywordtype">double</span> t)<span class="keyword"> const</span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordflow">if</span>(n &lt; N) {</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordflow">if</span>(d == 0)</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;      <span class="keywordflow">return</span> leak * <span class="keyword">get</span>(n, t - 1);</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    d -= 1;</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">if</span>(d &lt; D[n]) {</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;      <span class="keywordtype">double</span> v = <span class="keyword">get</span>(indexes[d + offsets[n]], t - 1);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <span class="keywordflow">return</span> v &lt; 0 ? 0 : v == 0 ? 0.5 : v &lt; SAT ? v : SAT;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    }</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    d -= D[n];</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span>(d &lt; input.getN())</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      <span class="keywordflow">return</span> input.get(d, t - 1);</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">return</span> 0;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div><div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a7f1f3018296a444783a909c75d62dac0">  138</a></span>&#160;<span class="keywordtype">double</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a7f1f3018296a444783a909c75d62dac0">network::SparseNonLinearTransform::getKernelDerivative</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> d, <span class="keywordtype">double</span> t, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_, <span class="keywordtype">double</span> t_)<span class="keyword"> const</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordflow">return</span> n &lt; N ? (d == 0 ?</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                  (n_ == n &amp;&amp; t_ == t - 1 ? leak : 0) :</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                  (d &lt;= D[n] &amp;&amp; n_ == indexes[d - 1 + offsets[n]] &amp;&amp; t_ == t - 1 &amp;&amp; 0 &lt; <span class="keyword">get</span>(n_, t_) &amp;&amp; <span class="keyword">get</span>(n_, t_) &lt; SAT ? 1 : 0)</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                  ) : 0;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;}</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classnetwork_1_1SparseNonLinearTransform.html#a4149bc00afda3de3e12764f1e927bd8d">  145</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classnetwork_1_1SparseNonLinearTransform.html#a4149bc00afda3de3e12764f1e927bd8d">network::SparseNonLinearTransform::isConnected</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n, <span class="keywordtype">double</span> t, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> n_, <span class="keywordtype">double</span> t_)<span class="keyword"> const</span></div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword"></span>{</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">return</span> n &lt; N &amp;&amp; n_ &lt; N &amp;&amp; t_ == t - 1 &amp;&amp; ((n_ == n &amp;&amp; leak != 0) || connected[n_ + n * N]);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div><div class="ttc" id="namespacenetwork_html"><div class="ttname"><a href="namespacenetwork.html">network</a></div><div class="ttdef"><b>Definition:</b> <a href="SoftMaxTransform_8hpp_source.html#l00001">SoftMaxTransform.hpp:1</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a33573dc2ca11fd5e4a2ae167fe74916f"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a33573dc2ca11fd5e4a2ae167fe74916f">network::SparseNonLinearTransform::getKernelValue</a></div><div class="ttdeci">double getKernelValue(unsigned int n, unsigned int d, double t) const</div><div class="ttdoc">Returns the recurrent kernel value. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00122">SparseNonLinearTransform.cpp:122</a></div></div>
<div class="ttc" id="classnetwork_1_1Input_html"><div class="ttname"><a href="classnetwork_1_1Input.html">network::Input</a></div><div class="ttdoc">Defines the input of a calculation network. </div><div class="ttdef"><b>Definition:</b> <a href="Input_8hpp_source.html#l00003">Input.hpp:3</a></div></div>
<div class="ttc" id="classnetwork_1_1Transform_html_a7cbe29c970df43f5cce3b7fb35b07a9d"><div class="ttname"><a href="classnetwork_1_1Transform.html#a7cbe29c970df43f5cce3b7fb35b07a9d">network::Transform::input</a></div><div class="ttdeci">const Input &amp; input</div><div class="ttdef"><b>Definition:</b> <a href="Transform_8hpp_source.html#l00005">Transform.hpp:5</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a90418e196b6e6c2ee0cb411767124680"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a90418e196b6e6c2ee0cb411767124680">network::SparseNonLinearTransform::getKernelDimension</a></div><div class="ttdeci">unsigned int getKernelDimension(unsigned int n) const</div><div class="ttdoc">Returns the recurrent kernel dimension. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00118">SparseNonLinearTransform.cpp:118</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html">network::KernelTransform</a></div><div class="ttdoc">Defines a discrete-time recurrent input/output kernel transform. </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8hpp_source.html#l00016">KernelTransform.hpp:16</a></div></div>
<div class="ttc" id="classDensity_html_ac7a3cee17572937fdd88474d2955af2c"><div class="ttname"><a href="classDensity.html#ac7a3cee17572937fdd88474d2955af2c">Density::booleans</a></div><div class="ttdeci">static bool * booleans(unsigned int size, unsigned int count)</div><div class="ttdoc">Gets an array of random true values, adjusting the random draw to get an exact number of true value...</div><div class="ttdef"><b>Definition:</b> <a href="Density_8cpp_source.html#l00062">Density.cpp:62</a></div></div>
<div class="ttc" id="assume_8h_html_a9812ecd51b96b3714e853e7301515ffe"><div class="ttname"><a href="assume_8h.html#a9812ecd51b96b3714e853e7301515ffe">assume</a></div><div class="ttdeci">void assume(bool condition, String thrown, String message,...)</div><div class="ttdoc">Checks a condition at run-time and throws a fatal error exception and/or dumps a warning if not verif...</div><div class="ttdef"><b>Definition:</b> <a href="assume_8c_source.html#l00007">assume.c:7</a></div></div>
<div class="ttc" id="classnetwork_1_1KernelTransform_html_aed8378faaac02ee9707b146a15ce9f4e"><div class="ttname"><a href="classnetwork_1_1KernelTransform.html#aed8378faaac02ee9707b146a15ce9f4e">network::KernelTransform::getWeight</a></div><div class="ttdeci">double getWeight(unsigned int n, unsigned int d) const</div><div class="ttdoc">Gets one weight . </div><div class="ttdef"><b>Definition:</b> <a href="KernelTransform_8hpp_source.html#l00086">KernelTransform.hpp:86</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a415e9a6727f2eca0a0e9cd2f2e039f4a"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a415e9a6727f2eca0a0e9cd2f2e039f4a">network::SparseNonLinearTransform::setWeights</a></div><div class="ttdeci">KernelTransform &amp; setWeights(const KernelTransform &amp;network)</div><div class="ttdoc">Sets weights from another network of the same type. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00103">SparseNonLinearTransform.cpp:103</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html">network::SparseNonLinearTransform</a></div><div class="ttdoc">Defines a recurrent network as a fixed leak sparse rectified linear combination of input and recurren...</div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8hpp_source.html#l00014">SparseNonLinearTransform.hpp:14</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a9d51caab7be469a0824ef3cfa0ec57af"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a9d51caab7be469a0824ef3cfa0ec57af">network::SparseNonLinearTransform::setLeak</a></div><div class="ttdeci">SparseNonLinearTransform &amp; setLeak(double value=0)</div><div class="ttdoc">Sets a fixed common leak for this network. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00022">SparseNonLinearTransform.cpp:22</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a155089a2134a96e499ca4aabbb7d9d60"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a155089a2134a96e499ca4aabbb7d9d60">network::SparseNonLinearTransform::setConnections</a></div><div class="ttdeci">SparseNonLinearTransform &amp; setConnections(unsigned int D=0, int seed=-1)</div><div class="ttdoc">Randomly draws the sparse connections. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00028">SparseNonLinearTransform.cpp:28</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a924a015f9be23d01e4f9dc219c13fb01"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a924a015f9be23d01e4f9dc219c13fb01">network::SparseNonLinearTransform::~SparseNonLinearTransform</a></div><div class="ttdeci">~SparseNonLinearTransform()</div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00096">SparseNonLinearTransform.cpp:96</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a4149bc00afda3de3e12764f1e927bd8d"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a4149bc00afda3de3e12764f1e927bd8d">network::SparseNonLinearTransform::isConnected</a></div><div class="ttdeci">bool isConnected(unsigned int n, double t, unsigned int n_, double t_) const</div><div class="ttdoc">Checks if two units are connected. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00145">SparseNonLinearTransform.cpp:145</a></div></div>
<div class="ttc" id="classDensity_html_a712af786c3a567c82d3bca02954426f0"><div class="ttname"><a href="classDensity.html#a712af786c3a567c82d3bca02954426f0">Density::setSeed</a></div><div class="ttdeci">static void setSeed(int seed=-1)</div><div class="ttdoc">Generates the seed of the pseudo random generator. </div><div class="ttdef"><b>Definition:</b> <a href="Density_8cpp_source.html#l00018">Density.cpp:18</a></div></div>
<div class="ttc" id="s__printf_8h_html_a2ee6bdc512e615babf7382300f71f85c"><div class="ttname"><a href="s__printf_8h.html#a2ee6bdc512e615babf7382300f71f85c">s_printf</a></div><div class="ttdeci">std::string s_printf(String header,...)</div><div class="ttdoc">Returns a string formated a-la printf. </div><div class="ttdef"><b>Definition:</b> <a href="s__printf_8c_source.html#l00008">s_printf.c:8</a></div></div>
<div class="ttc" id="mnemonas_8hpp_html"><div class="ttname"><a href="mnemonas_8hpp.html">mnemonas.hpp</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a7f2520017a20c96e6226382ede00b01f"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a7f2520017a20c96e6226382ede00b01f">network::SparseNonLinearTransform::SparseNonLinearTransform</a></div><div class="ttdeci">SparseNonLinearTransform(unsigned int N, const Input &amp;input)</div><div class="ttdoc">Resets the transform for the given parameters. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00003">SparseNonLinearTransform.cpp:3</a></div></div>
<div class="ttc" id="classnetwork_1_1SparseNonLinearTransform_html_a7f1f3018296a444783a909c75d62dac0"><div class="ttname"><a href="classnetwork_1_1SparseNonLinearTransform.html#a7f1f3018296a444783a909c75d62dac0">network::SparseNonLinearTransform::getKernelDerivative</a></div><div class="ttdeci">double getKernelDerivative(unsigned int n, unsigned int d, double t, unsigned int n_, double t_) const</div><div class="ttdoc">Returns the recurrent kernel derivative with respect to a recurrent state value. </div><div class="ttdef"><b>Definition:</b> <a href="SparseNonLinearTransform_8cpp_source.html#l00138">SparseNonLinearTransform.cpp:138</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<hr/><div align='right'><tt>mnemosyne brainybot (version of 2018-01-30 at 20:31:53) </tt> </div><hr/>
